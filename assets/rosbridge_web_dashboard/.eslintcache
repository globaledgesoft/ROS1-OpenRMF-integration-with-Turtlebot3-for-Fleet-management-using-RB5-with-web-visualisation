[{"/home/mlteam/rosbridge_web_dashboard/src/index.js":"1","/home/mlteam/rosbridge_web_dashboard/src/App.js":"2","/home/mlteam/rosbridge_web_dashboard/src/reportWebVitals.js":"3","/home/mlteam/rosbridge_web_dashboard/src/components/Header.jsx":"4","/home/mlteam/rosbridge_web_dashboard/src/components/Footer.jsx":"5","/home/mlteam/rosbridge_web_dashboard/src/components/Body.jsx":"6","/home/mlteam/rosbridge_web_dashboard/src/components/Home.jsx":"7","/home/mlteam/rosbridge_web_dashboard/src/components/About.jsx":"8","/home/mlteam/rosbridge_web_dashboard/src/components/Connection.jsx":"9","/home/mlteam/rosbridge_web_dashboard/src/components/Map.jsx":"10","/home/mlteam/rosbridge_web_dashboard/src/components/Teleoperation.jsx":"11","/home/mlteam/rosbridge_web_dashboard/src/components/RobotState.jsx":"12","/home/mlteam/rosbridge_web_dashboard/src/scripts/config.js":"13","/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/index.js":"14","/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/reportWebVitals.js":"15","/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/App.js":"16","/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/Header.jsx":"17","/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/Body.jsx":"18","/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/Footer.jsx":"19","/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/Home.jsx":"20","/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/About.jsx":"21","/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/Connection.jsx":"22","/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/Map.jsx":"23","/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/RobotState.jsx":"24","/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/Teleoperation.jsx":"25","/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/scripts/config.js":"26"},{"size":544,"mtime":1702042928982,"results":"27","hashOfConfig":"28"},{"size":270,"mtime":1702042942694,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":1682871678000,"results":"30","hashOfConfig":"28"},{"size":699,"mtime":1702042551877,"results":"31","hashOfConfig":"28"},{"size":296,"mtime":1701669741000,"results":"32","hashOfConfig":"28"},{"size":548,"mtime":1702042960770,"results":"33","hashOfConfig":"28"},{"size":915,"mtime":1702043066133,"results":"34","hashOfConfig":"28"},{"size":324,"mtime":1682871678000,"results":"35","hashOfConfig":"28"},{"size":1759,"mtime":1682871678000,"results":"36","hashOfConfig":"28"},{"size":12567,"mtime":1704192912831,"results":"37","hashOfConfig":"28"},{"size":6606,"mtime":1703756976929,"results":"38","hashOfConfig":"28"},{"size":9220,"mtime":1703830007089,"results":"39","hashOfConfig":"28"},{"size":236,"mtime":1703654077665,"results":"40","hashOfConfig":"28"},{"size":544,"mtime":1702042928982,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":1682871678000,"results":"43","hashOfConfig":"42"},{"size":270,"mtime":1702042942694,"results":"44","hashOfConfig":"42"},{"size":699,"mtime":1702042551877,"results":"45","hashOfConfig":"42"},{"size":548,"mtime":1702042960770,"results":"46","hashOfConfig":"42"},{"size":296,"mtime":1701669741000,"results":"47","hashOfConfig":"42"},{"size":915,"mtime":1702043066133,"results":"48","hashOfConfig":"42"},{"size":324,"mtime":1682871678000,"results":"49","hashOfConfig":"42"},{"size":1759,"mtime":1682871678000,"results":"50","hashOfConfig":"42"},{"size":8040,"mtime":1711447464282,"results":"51","hashOfConfig":"42"},{"size":9220,"mtime":1703830007089,"results":"52","hashOfConfig":"42"},{"size":6606,"mtime":1703756976929,"results":"53","hashOfConfig":"42"},{"size":236,"mtime":1703654077665,"results":"54","hashOfConfig":"42"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"qp5n6e",{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"57"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"57"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"57"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"57"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12q7odx",{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mlteam/rosbridge_web_dashboard/src/index.js",[],["113","114"],"/home/mlteam/rosbridge_web_dashboard/src/App.js",[],"/home/mlteam/rosbridge_web_dashboard/src/reportWebVitals.js",[],"/home/mlteam/rosbridge_web_dashboard/src/components/Header.jsx",[],"/home/mlteam/rosbridge_web_dashboard/src/components/Footer.jsx",[],"/home/mlteam/rosbridge_web_dashboard/src/components/Body.jsx",[],"/home/mlteam/rosbridge_web_dashboard/src/components/Home.jsx",["115"],"import React, { Component } from \"react\";\nimport Connection from \"./Connection\";\nimport RobotState from \"./RobotState\";\nimport Teleoperation from \"./Teleoperation\";\nimport Map from \"./Map\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nclass Home extends Component {\n  state = {};\n\n  render() {\n    return (\n      <div>\n        <Container>\n          <h1 className=\"text-center mt-3\">Robot Control Page</h1>\n          <Row>\n            <Col>\n              <Connection />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Teleoperation />\n            </Col>\n          </Row>\n          <Row>\n            {\" \"}\n            <Col>\n              <RobotState />\n            </Col>\n            <Col>\n              <h1>MAP Visualization</h1>\n              <Map></Map>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/home/mlteam/rosbridge_web_dashboard/src/components/About.jsx",[],"/home/mlteam/rosbridge_web_dashboard/src/components/Connection.jsx",["116"],"import React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Config from \"../scripts/config\";\nclass Connection extends Component {\n  state = { connected: false, ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Alert\n          className=\"text-center m-3\"\n          variant={this.state.connected ? \"success\" : \"danger\"}\n        >\n          {this.state.connected ? \"Robot Connected\" : \"Robot Disconnected\"}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nexport default Connection;\n","/home/mlteam/rosbridge_web_dashboard/src/components/Map.jsx",["117","118","119","120"],"/home/mlteam/rosbridge_web_dashboard/src/components/Teleoperation.jsx",["121"],"import React, { Component } from \"react\";\nimport { Row, Col} from \"react-bootstrap\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from \"../scripts/config\";\n\nclass Teleoperation extends Component {\n  state = { ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n\n    this.handleMove_tb3_0 = this.handleMove_tb3_0.bind(this);\n    this.handleStop_tb3_0 = this.handleStop_tb3_0.bind(this);\n\n\n    this.handleMove_tb3_1 = this.handleMove_tb3_1.bind(this);\n    this.handleStop_tb3_1 = this.handleStop_tb3_1.bind(this);\n    \n\n    this.handleMove_tb3_2 = this.handleMove_tb3_2.bind(this);\n    this.handleStop_tb3_2 = this.handleStop_tb3_2.bind(this);\n\n\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  handleMove_tb3_0(event) {\n    console.log(\"handle move\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: event.y / 50,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: -event.x / 50,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n  handleStop_tb3_0(event) {\n    console.log(\"handle stop\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n\n\n  handleMove_tb3_1(event) {\n    console.log(\"handle move\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"tb3_1/cmd_vel\",\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: event.y / 50,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: -event.x / 50,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n  handleStop_tb3_1(event) {\n    console.log(\"handle stop\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"tb3_1/cmd_vel\",\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n\n  handleMove_tb3_2(event) {\n    console.log(\"handle move\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"tb3_2/cmd_vel\",\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: event.y / 50,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: -event.x / 50,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n  handleStop_tb3_2(event) {\n    console.log(\"handle stop\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"tb3_2/cmd_vel\",\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n\n\n\n  render() {\n    return (\n      <div>\n      <Row>\n        <Col>\n        <h4>Teleop for tb3_0</h4>\n        <Joystick\n          size={100}\n          baseColor=\"#EEEEEE\"\n          stickColor=\"#BBBBBB\"\n          move={this.handleMove_tb3_0}\n          stop={this.handleStop_tb3_0}\n        ></Joystick>\n        </Col>\n        <Col>\n      <h4>Teleop for tb3_1</h4>\n      <Joystick\n        size={100}\n        baseColor=\"#EEEEEE\"\n        stickColor=\"#BBBBBB\"\n        move={this.handleMove_tb3_1}\n        stop={this.handleStop_tb3_1}\n      ></Joystick>\n      </Col>\n        <Col>\n      <h4>Teleop for tb3_2</h4>\n      <Joystick\n        size={100}\n        baseColor=\"#EEEEEE\"\n        stickColor=\"#BBBBBB\"\n        move={this.handleMove_tb3_2}\n        stop={this.handleStop_tb3_2}\n      ></Joystick>\n       </Col>\n      </Row>\n    </div>\n\n\n    );\n  }\n}\n\nexport default Teleoperation;\n","/home/mlteam/rosbridge_web_dashboard/src/components/RobotState.jsx",["122","123","124","125","126","127"],"import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport * as Three from \"three\";\n\nclass RobotState extends Component {\n  state = {\n    ros: null,\n    x_tb3_0: 0,\n    y_tb3_0: 0,\n    orientation_tb3_0: 0,\n    linear_velocity_tb3_0: 0,\n    angular_velocity_tb3_0: 0,\n    x_tb3_1:0,\n    y_tb3_1: 0,\n    orientation_tb3_1: 0,\n    linear_velocity_tb3_1: 0,\n    angular_velocity_tb3_1: 0,\n    x_tb3_2:0,\n    y_tb3_2: 0,\n    orientation_tb3_2: 0,\n    linear_velocity_tb3_2: 0,\n    angular_velocity_tb3_2: 0,\n  };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  componentDidMount() {\n    this.getRobotState_tb3_0();\n    this.getRobotState_tb3_1();\n    this.getRobotState_tb3_2();\n  }\n\n  \n\n  getRobotState_tb3_0() {\n    //create a pose subscriber\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.POSE_TOPIC,\n      messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n    });\n\n    //create a pose callback\n    pose_subscriber.subscribe((message) => {\n      this.setState({ x_tb3_0: message.pose.pose.position.x.toFixed(2) });\n      this.setState({ y_tb3_0: message.pose.pose.position.y.toFixed(2) });\n      this.setState({\n        orientation_tb3_0: this.getOrientationFromQuaternion(\n          message.pose.pose.orientation\n        ).toFixed(2),\n      });\n    });\n\n    //create a subscriber for the velocities in the odom topic\n    var velocity_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.ODOM_TOPIC,\n      messageType: \"nav_msgs/Odometry\",\n    });\n\n    //callback function for the odom\n    velocity_subscriber.subscribe((message) => {\n      this.setState({\n        linear_velocity_tb3_0: message.twist.twist.linear.x.toFixed(2),\n      });\n      this.setState({\n        angular_velocity_tb3_0: message.twist.twist.angular.z.toFixed(2),\n      });\n    });\n  }\n\n\n  getOrientationFromQuaternion(ros_orientation_quaternion) {\n    var q = new Three.Quaternion(\n      ros_orientation_quaternion.x,\n      ros_orientation_quaternion.y,\n      ros_orientation_quaternion.z,\n      ros_orientation_quaternion.w\n    );\n    //convert this quaternion into Roll, Pitch and Yaw\n    var RPY = new Three.Euler().setFromQuaternion(q);\n\n    return RPY[\"_z\"] * (180 / Math.PI);\n  }\n\n\n  getRobotState_tb3_1() {\n    //create a pose subscriber\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name:\"tb3_1/amcl_pose\",\n      messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n    });\n\n    //create a pose callback\n    pose_subscriber.subscribe((message) => {\n      this.setState({ x_tb3_1: message.pose.pose.position.x.toFixed(2) });\n      this.setState({ y_tb3_1: message.pose.pose.position.y.toFixed(2) });\n      this.setState({\n        orientation_tb3_1: this.getOrientationFromQuaternion(\n          message.pose.pose.orientation\n        ).toFixed(2),\n      });\n    });\n\n    //create a subscriber for the velocities in the odom topic\n    var velocity_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"tb3_1/odom\",\n      messageType: \"nav_msgs/Odometry\",\n    });\n\n    //callback function for the odom\n    velocity_subscriber.subscribe((message) => {\n      this.setState({\n        linear_velocity_tb3_1: message.twist.twist.linear.x.toFixed(2),\n      });\n      this.setState({\n        angular_velocity_tb3_1: message.twist.twist.angular.z.toFixed(2),\n      });\n    });\n  }\n\n  getOrientationFromQuaternion(ros_orientation_quaternion) {\n    var q = new Three.Quaternion(\n      ros_orientation_quaternion.x,\n      ros_orientation_quaternion.y,\n      ros_orientation_quaternion.z,\n      ros_orientation_quaternion.w\n    );\n    //convert this quaternion into Roll, Pitch and Yaw\n    var RPY = new Three.Euler().setFromQuaternion(q);\n\n    return RPY[\"_z\"] * (180 / Math.PI);\n  }\n\n  getOrientationFromQuaternion(ros_orientation_quaternion) {\n    var q = new Three.Quaternion(\n      ros_orientation_quaternion.x,\n      ros_orientation_quaternion.y,\n      ros_orientation_quaternion.z,\n      ros_orientation_quaternion.w\n    );\n    //convert this quaternion into Roll, Pitch and Yaw\n    var RPY = new Three.Euler().setFromQuaternion(q);\n\n    return RPY[\"_z\"] * (180 / Math.PI);\n  }\n\n\n  getRobotState_tb3_2() {\n    //create a pose subscriber\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name:\"tb3_2/amcl_pose\",\n      messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n    });\n\n    //create a pose callback\n    pose_subscriber.subscribe((message) => {\n      this.setState({ x_tb3_2: message.pose.pose.position.x.toFixed(2) });\n      this.setState({ y_tb3_2: message.pose.pose.position.y.toFixed(2) });\n      this.setState({\n        orientation_tb3_2: this.getOrientationFromQuaternion(\n          message.pose.pose.orientation\n        ).toFixed(2),\n      });\n    });\n\n    //create a subscriber for the velocities in the odom topic\n    var velocity_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"tb3_2/odom\",\n      messageType: \"nav_msgs/Odometry\",\n    });\n\n    //callback function for the odom\n    velocity_subscriber.subscribe((message) => {\n      this.setState({\n        linear_velocity_tb3_2: message.twist.twist.linear.x.toFixed(2),\n      });\n      this.setState({\n        angular_velocity_tb3_2: message.twist.twist.angular.z.toFixed(2),\n      });\n    });\n  }\n\n  getOrientationFromQuaternion(ros_orientation_quaternion) {\n    var q = new Three.Quaternion(\n      ros_orientation_quaternion.x,\n      ros_orientation_quaternion.y,\n      ros_orientation_quaternion.z,\n      ros_orientation_quaternion.w\n    );\n    //convert this quaternion into Roll, Pitch and Yaw\n    var RPY = new Three.Euler().setFromQuaternion(q);\n\n    return RPY[\"_z\"] * (180 / Math.PI);\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <Row>\n        \n          <Col>\n            <h4 className=\"mt-4\">Position for tb3_0</h4>\n            <h6 className=\"mt-4\">x: {this.state.x_tb3_0}</h6>\n            <h6 className=\"mt-0\">y: {this.state.y_tb3_0}</h6>\n            <h6 className=\"mt-0\">Orientation: {this.state.orientation_tb3_0}</h6>\n          </Col>\n      \n        \n          <Col>\n            <h4 className=\"mt-4\">Velocities for tb3_0</h4>\n            <h6 className=\"mt-4\">\n              Linear Velocity: {this.state.linear_velocity_tb3_0}\n            </h6>\n            <h6 className=\"mt-0\">\n              Angular Velocity: {this.state.angular_velocity_tb3_0}\n            </h6>\n          </Col>\n\n      \n\n          <Col>\n            <h4 className=\"mt-4\">Position for tb3_1</h4>\n            <h6 className=\"mt-4\">x: {this.state.x_tb3_1}</h6>\n            <h6 className=\"mt-0\">y: {this.state.y_tb3_1}</h6>\n            <h6 className=\"mt-0\">Orientation: {this.state.orientation_tb3_1}</h6>\n          </Col>\n      \n        </Row>\n        <Row>\n          \n          <Col>\n            <h4 className=\"mt-4\">Velocities for tb3_1</h4>\n            <h6 className=\"mt-4\">\n              Linear Velocity: {this.state.linear_velocity_tb3_1}\n            </h6>\n            <h6 className=\"mt-0\">\n              Angular Velocity: {this.state.angular_velocity_tb3_1}\n            </h6>\n          </Col>\n\n      \n\n          <Col>\n            <h4 className=\"mt-4\">Position for tb3_2</h4>\n            <h6 className=\"mt-4\">x: {this.state.x_tb3_2}</h6>\n            <h6 className=\"mt-0\">y: {this.state.y_tb3_2}</h6>\n            <h6 className=\"mt-0\">Orientation: {this.state.orientation_tb3_2}</h6>\n          </Col>\n      \n      \n\n\n          <Col>\n            <h4 className=\"mt-4\">Velocities for tb3_2</h4>\n            <h6 className=\"mt-4\">\n              Linear Velocity: {this.state.linear_velocity_tb3_2}\n            </h6>\n            <h6 className=\"mt-0\">\n              Angular Velocity: {this.state.angular_velocity_tb3_2}\n            </h6>\n          </Col>\n\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default RobotState;\n","/home/mlteam/rosbridge_web_dashboard/src/scripts/config.js",[],"/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/index.js",[],"/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/reportWebVitals.js",[],"/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/App.js",[],"/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/Header.jsx",[],"/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/Body.jsx",[],"/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/Footer.jsx",[],"/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/Home.jsx",["128"],"/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/About.jsx",[],"/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/Connection.jsx",["129"],"/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/Map.jsx",["130","131","132","133"],"import React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\n\nclass Map extends Component {\n  state = {\n    ros: null,\n  };\n\n  constructor() {\n    super();\n    //this.init_connection = this.view_map.bind(this);\n    this.view_map_0 = this.view_map_0.bind(this);\n    //this.view_map_1= this.view_map_1.bind(this);\n    //this.view_map_2= this.view_map_2.bind(this);\n  }\n\n  init_connection() {\n    //this.setState({ ros: new ROSLIB.Ros() });\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(\"Map:\" + this.state.ros);\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n    console.log(\"Map: componentDidMount\" + this.state.ros);\n    this.view_map_0();\n    //this.view_map_1();\n    //this.view_map_2();\n  }\n/*\n  handleRobotButtonClick(robotName) {\n    // Change the behavior based on the clicked robot button\n    // For simplicity, let's assume you have a service to send a goal to the robot\n    const goalTopic = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: `/${robotName}/move_base_simple/goal`,\n      messageType: 'geometry_msgs/PoseStamped',\n    });\n    const goal = {\n      header: { frame_id: 'map' },\n      pose: {\n        position: { x: 6.6922299, y: 0.575584, z: 0.0 },\n        orientation: { x: 0.0, y: 0.0, z: 0.744092, w: 0.668078 },\n      },\n    };\n    const goalMsg = new window.ROSLIB.Message(goal);\n    goalTopic.publish(goalMsg);\n  }\n*/\n\n\n\n\n\n\n\nhandleRobotButtonClick(robotName, goal) {\n  // Change the behavior based on the clicked robot button\n  // For simplicity, let's assume you have a topic to send a goal to the robot\n  const goalTopic = new window.ROSLIB.Topic({\n    ros: this.state.ros,\n    name: `/${robotName}/move_base_simple/goal`,\n    messageType: 'geometry_msgs/PoseStamped',\n  });\n\n  const goalMsg = new window.ROSLIB.Message(goal);\n  goalTopic.publish(goalMsg);\n\n  console.log(`${robotName} robot moved to the specified goal!`);\n}\n\n\n\n\nview_map_0(){\n   \n  var viewer = new window.ROS2D.Viewer({\n  divID: 'map',\n  width: 640,\n  height: 480\n  });\n   \n  let gridClient = new window.ROS2D.OccupancyGridClient({\n  ros: this.state.ros,\n  rootObject: viewer.scene,\n  });\n\n  var navClient_tb3_0 = new window.NAV2D.OccupancyGridClientNav({\n    ros: this.state.ros,\n    rootObject: viewer.scene,\n    viewer: viewer,\n    serverName: \"/tb3_0/move_base\",\n    withOrientation: true,\n    continuous: true,\n  });\n\n\n var navClient_tb3_1 = new window.NAV2D.OccupancyGridClientNav({\n    ros: this.state.ros,\n    rootObject: viewer.scene,\n    viewer: viewer,\n    serverName: \"/tb3_1/move_base\",\n    withOrientation: true,\n  });\n\n\n  \n\n  var navClient_tb3_2 = new window.NAV2D.OccupancyGridClientNav({\n    ros: this.state.ros,\n    rootObject: viewer.scene,\n    viewer: viewer,\n    serverName: \"/tb3_2/move_base\",\n    withOrientation: true,\n  });\n\n  var pathView_0 = new window.ROS2D.PathShape({\n    ros: this.state.ros,\n    strokeSize: 0.05,\n    strokeColor: \"red\",\n  });\n\n  var pathView_1 = new window.ROS2D.PathShape({\n    ros: this.state.ros,\n    strokeSize: 0.05,\n    strokeColor: \"green\",\n  });\n\n  var pathView_2 = new window.ROS2D.PathShape({\n    ros: this.state.ros,\n    strokeSize: 0.05,\n    strokeColor: \"blue\",\n  });\n  \n  // Check if navClient.rootObject is defined before adding pathView\n  if (1) {\n    viewer.scene.addChild(pathView_0);\n    viewer.scene.addChild(pathView_1);\n    viewer.scene.addChild(pathView_2);\n  \n    var pathTopic_0 = new window.ROSLIB.Topic({\n        ros: this.state.ros,\n        name: '/tb3_0/move_base/NavfnROS/plan',\n        messageType: 'nav_msgs/Path',\n    });\n    var pathTopic_1 = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: '/tb3_1/move_base/NavfnROS/plan',\n      messageType: 'nav_msgs/Path',\n    });\n  var pathTopic_2 = new window.ROSLIB.Topic({\n    ros: this.state.ros,\n    name: '/tb3_2/move_base/NavfnROS/plan',\n    messageType: 'nav_msgs/Path',\n    });\n  \n    pathTopic_0.subscribe(function (message) {\n      pathView_0.setPath(message);\n    });\n    pathTopic_1.subscribe(function (message) {\n      pathView_1.setPath(message);\n    });    \n    pathTopic_2.subscribe(function (message) {\n     pathView_2.setPath(message);\n    });\n  } else {\n    console.error(\"navClient.rootObject is undefined. Check your initialization.\");\n  }\n\n\n\n\n  // Scale the canvas to fit the map\n  \n  gridClient.on('change', function () {\n    viewer.scaleToDimensions(gridClient.currentGrid.width, gridClient.currentGrid.height);\n    viewer.shift(gridClient.currentGrid.pose.position.x, gridClient.currentGrid.pose.position.y);\n  \n  });\n   \n  var robotNames = ['tb3_0', 'tb3_1', 'tb3_2'];\n  var robotMarkers = [];\n  var topics = [];\n   \n  var createFunc = function (handlerToCall, discriminator, robotMarker) {\n  \n    return discriminator.subscribe(function (pose) {\n      robotMarker.x = pose.pose.pose.position.x;\n      robotMarker.y = -pose.pose.pose.position.y;\n   \n      // Fixing the rotation\n  \n      var quaternion = new window.THREE.Quaternion(\n  \n        pose.pose.pose.orientation.x,\n  \n        pose.pose.pose.orientation.y,\n  \n        pose.pose.pose.orientation.z,\n  \n        pose.pose.pose.orientation.w\n  \n      );\n   \n      robotMarker.rotation = new window.THREE.Euler().setFromQuaternion(quaternion).z * -180 / Math.PI;\n  \n    });\n  \n  };\n   \n  for (let i = 0; i < robotNames.length; i++) {\n  \n    // Setup the map client.\n  \n    var robotMarker = new window.ROS2D.NavigationArrow({\n  \n      size: 0.25,\n  \n      strokeSize: 0.05,\n  \n      pulse: true,\n  \n      //fillColor: createjs.Graphics.getRGB(randomr(), randomg(), randomb(), 0.65)\n  \n    });\n  \n    robotMarkers.push(robotMarker);\n   \n    var poseTopic = new window.ROSLIB.Topic({\n  \n      ros: this.state.ros,\n  \n      name: '/' + robotNames[i] + '/amcl_pose',\n  \n      messageType: 'geometry_msgs/PoseWithCovarianceStamped'\n  \n    });\n  \n    topics.push(poseTopic);\n  \n    createFunc('subscribe', poseTopic, robotMarker);\n  \n  }\n   \n  for (let i = 0; i < robotMarkers.length; i++) {\n  \n    gridClient.rootObject.addChild(robotMarkers[i]);\n  \n  }\n  \n\n\n\n\n}\n\n\n\n \n  render() {\n    const buttonStyle = {\n      margin: '5px',\n      padding: '10px',\n      fontSize: '16px',\n      backgroundColor: '#4CAF50', /* Green background */\n      color: 'white',\n      border: 'none',\n      borderRadius: '5px',\n      cursor: 'pointer',\n    };\n   \n \n    return (\n     \n\n      <div>\n\n        <div id=\"map\" >Viewer</div>\n        <button\n        type=\"button\"\n        style={buttonStyle}\n        onClick={() =>\n          this.handleRobotButtonClick('tb3_0', {\n            header: { frame_id: 'map' },\n            pose: { position: {    x: -2.969065, y: 4.050793, z: 0.000000}, orientation: {     x: 0.0, y: 0.0, z: -0.000000, w: 1.000000} },\n          })\n        }\n      >\n        tb3_0\n      </button>\n      <button\n        type=\"button\"\n        style={buttonStyle}\n        onClick={() =>\n          this.handleRobotButtonClick('tb3_1', {\n            header: { frame_id: 'map' },\n            pose: { position: {x: 2.856473, y: 1.744179, z: 0.000000 }, orientation: {     x: 0.000000, y: 0.000000, z: -0.014999, w: 0.999888 } },\n          })\n        }\n      >\n        tb3_1\n      </button>\n        <button\n        type=\"button\"\n        style={buttonStyle}\n        onClick={() =>\n          this.handleRobotButtonClick('tb3_2', {\n            header: { frame_id: 'map' },\n            pose: { position: {     x: -0.904558, y: 0.993230, z: 0.000000 }, orientation: { x: 0.000000, y: 0.000000, z: 0.999764, w: 0.021724 } },\n            \n          })\n        }\n      >\n        tb3_2\n      </button>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/RobotState.jsx",["134","135","136","137","138","139"],"/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/components/Teleoperation.jsx",["140"],"/home/mlteam/Robotics_prj/rosbridge_web_dashboard/src/scripts/config.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":6,"column":31,"nodeType":"147","messageId":"148","endLine":6,"endColumn":37},{"ruleId":"149","severity":1,"message":"150","line":13,"column":5,"nodeType":"151","messageId":"152","endLine":13,"endColumn":15},{"ruleId":"149","severity":1,"message":"150","line":19,"column":5,"nodeType":"151","messageId":"152","endLine":19,"endColumn":15},{"ruleId":"145","severity":1,"message":"153","line":106,"column":7,"nodeType":"147","messageId":"148","endLine":106,"endColumn":22},{"ruleId":"145","severity":1,"message":"154","line":116,"column":6,"nodeType":"147","messageId":"148","endLine":116,"endColumn":21},{"ruleId":"145","severity":1,"message":"155","line":127,"column":7,"nodeType":"147","messageId":"148","endLine":127,"endColumn":22},{"ruleId":"149","severity":1,"message":"150","line":27,"column":5,"nodeType":"151","messageId":"152","endLine":27,"endColumn":15},{"ruleId":"145","severity":1,"message":"156","line":2,"column":20,"nodeType":"147","messageId":"148","endLine":2,"endColumn":29},{"ruleId":"145","severity":1,"message":"146","line":2,"column":31,"nodeType":"147","messageId":"148","endLine":2,"endColumn":37},{"ruleId":"149","severity":1,"message":"150","line":32,"column":5,"nodeType":"151","messageId":"152","endLine":32,"endColumn":15},{"ruleId":"157","severity":1,"message":"158","line":177,"column":3,"nodeType":"159","messageId":"160","endLine":188,"endColumn":4},{"ruleId":"157","severity":1,"message":"158","line":190,"column":3,"nodeType":"159","messageId":"160","endLine":201,"endColumn":4},{"ruleId":"157","severity":1,"message":"158","line":241,"column":3,"nodeType":"159","messageId":"160","endLine":252,"endColumn":4},{"ruleId":"145","severity":1,"message":"146","line":6,"column":31,"nodeType":"147","messageId":"148","endLine":6,"endColumn":37},{"ruleId":"149","severity":1,"message":"150","line":13,"column":5,"nodeType":"151","messageId":"152","endLine":13,"endColumn":15},{"ruleId":"149","severity":1,"message":"150","line":19,"column":5,"nodeType":"151","messageId":"152","endLine":19,"endColumn":15},{"ruleId":"145","severity":1,"message":"153","line":106,"column":7,"nodeType":"147","messageId":"148","endLine":106,"endColumn":22},{"ruleId":"145","severity":1,"message":"154","line":116,"column":6,"nodeType":"147","messageId":"148","endLine":116,"endColumn":21},{"ruleId":"145","severity":1,"message":"155","line":127,"column":7,"nodeType":"147","messageId":"148","endLine":127,"endColumn":22},{"ruleId":"145","severity":1,"message":"156","line":2,"column":20,"nodeType":"147","messageId":"148","endLine":2,"endColumn":29},{"ruleId":"145","severity":1,"message":"146","line":2,"column":31,"nodeType":"147","messageId":"148","endLine":2,"endColumn":37},{"ruleId":"149","severity":1,"message":"150","line":32,"column":5,"nodeType":"151","messageId":"152","endLine":32,"endColumn":15},{"ruleId":"157","severity":1,"message":"158","line":177,"column":3,"nodeType":"159","messageId":"160","endLine":188,"endColumn":4},{"ruleId":"157","severity":1,"message":"158","line":190,"column":3,"nodeType":"159","messageId":"160","endLine":201,"endColumn":4},{"ruleId":"157","severity":1,"message":"158","line":241,"column":3,"nodeType":"159","messageId":"160","endLine":252,"endColumn":4},{"ruleId":"149","severity":1,"message":"150","line":27,"column":5,"nodeType":"151","messageId":"152","endLine":27,"endColumn":15},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'navClient_tb3_0' is assigned a value but never used.","'navClient_tb3_1' is assigned a value but never used.","'navClient_tb3_2' is assigned a value but never used.","'Container' is defined but never used.","no-dupe-class-members","Duplicate name 'getOrientationFromQuaternion'.","MethodDefinition","unexpected","no-global-assign","no-unsafe-negation"]